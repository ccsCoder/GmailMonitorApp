/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gmailmonitor.gui;

import gmailmonitor.utils.GeneralUtils;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author CodeBeast
 */
public class LoggerFrame extends javax.swing.JFrame {
    private DateFormat sdf;
    /**
     * Creates new form LoggerFrame
     */
    public LoggerFrame() {
        initComponents();
        this.centerWindow();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            this.sdf = DateFormat.getTimeInstance(DateFormat.MEDIUM);
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoggerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoggerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoggerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoggerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        this.fileChooser = new JFileChooser();
        this.fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
    }
    
    public void log(String msg) {
        this.jTextAreaLog.append(GeneralUtils.NEWLINE+this.sdf.format(new Date(System.currentTimeMillis()))+":"+msg);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jButtonSaveToFile = new javax.swing.JButton();
        jButtonClearText = new javax.swing.JButton();

        setTitle("Activity Log");

        jTextAreaLog.setBackground(new java.awt.Color(0, 0, 0));
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setForeground(new java.awt.Color(102, 255, 102));
        jTextAreaLog.setLineWrap(true);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setText("Activity Log");
        jScrollPane2.setViewportView(jTextAreaLog);

        jButtonSaveToFile.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonSaveToFile.setText("Save to file");
        jButtonSaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveToFileActionPerformed(evt);
            }
        });

        jButtonClearText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonClearText.setText("Clear");
        jButtonClearText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jButtonClearText, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141)
                .addComponent(jButtonSaveToFile, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonSaveToFile, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(jButtonClearText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonClearTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearTextActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.YES_OPTION==JOptionPane.showConfirmDialog(null, "Are you sure you want to clear Activity Log ?", "Question",JOptionPane.YES_NO_OPTION , JOptionPane.QUESTION_MESSAGE)) {
            this.jTextAreaLog.setText("");
        }
    }//GEN-LAST:event_jButtonClearTextActionPerformed
    private void centerWindow() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
 
        // Determine the new location of the window
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;

        // Move the window
        this.setLocation(x, y);
    }
    private void jButtonSaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveToFileActionPerformed
        FileWriter fw = null;
        try {
            // TODO add your handling code here:
            if (this.fileChooser.showOpenDialog(null)==JFileChooser.APPROVE_OPTION) {
                DateFormat df = DateFormat.getDateInstance(DateFormat.DEFAULT);
                
                File f = new File(this.fileChooser.getSelectedFile()+System.getProperty("file.separator")+"GmailMonitorLog_"+df.format(new Date()) +".txt");
                System.out.println(this.fileChooser.getSelectedFile()+System.getProperty("file.separator")+"GmailMonitorLog_"+df.format(new Date()) +".txt");
                f.createNewFile();
                fw = new FileWriter(f);
                fw.write(this.jTextAreaLog.getText());
                fw.flush();
                GUI.getTrayIcon().displayMessage("Gmail Monitor", "Log saved to \" "+f.getAbsolutePath()+"\"", TrayIcon.MessageType.INFO);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "There was a problem saving the file...!", "OOPS!", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } finally {
            try {
                fw.close();
            } catch (IOException ex) {
                //swallow
            }
        }
        
    }//GEN-LAST:event_jButtonSaveToFileActionPerformed
    
//    public static void main(String[] args) {
//        new LoggerFrame().setVisible(true);
//    }
    private javax.swing.JFileChooser fileChooser;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClearText;
    private javax.swing.JButton jButtonSaveToFile;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaLog;
    // End of variables declaration//GEN-END:variables
}
